package STP.model.eo;

import java.math.BigDecimal;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 13 13:26:06 PKT 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ItemMasterEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ItemId,
        ItemTypeId,
        ItemNo,
        ItemCatId,
        ItemDescription,
        UomId,
        SizeId,
        ColorId,
        ParentId,
        MachineId,
        OldItemId,
        Brand,
        InventoryType,
        MinStock,
        MaxStock,
        RackNo,
        CabnitNo,
        ItemLife,
        Active,
        EnteredBy,
        EnteredOn,
        LastEditedBy,
        LastEditedOn,
        FabDetailEO,
        ItemTypeEO,
        UomEO,
        ItemCategoryEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ITEMID = AttributesEnum.ItemId.index();
    public static final int ITEMTYPEID = AttributesEnum.ItemTypeId.index();
    public static final int ITEMNO = AttributesEnum.ItemNo.index();
    public static final int ITEMCATID = AttributesEnum.ItemCatId.index();
    public static final int ITEMDESCRIPTION = AttributesEnum.ItemDescription.index();
    public static final int UOMID = AttributesEnum.UomId.index();
    public static final int SIZEID = AttributesEnum.SizeId.index();
    public static final int COLORID = AttributesEnum.ColorId.index();
    public static final int PARENTID = AttributesEnum.ParentId.index();
    public static final int MACHINEID = AttributesEnum.MachineId.index();
    public static final int OLDITEMID = AttributesEnum.OldItemId.index();
    public static final int BRAND = AttributesEnum.Brand.index();
    public static final int INVENTORYTYPE = AttributesEnum.InventoryType.index();
    public static final int MINSTOCK = AttributesEnum.MinStock.index();
    public static final int MAXSTOCK = AttributesEnum.MaxStock.index();
    public static final int RACKNO = AttributesEnum.RackNo.index();
    public static final int CABNITNO = AttributesEnum.CabnitNo.index();
    public static final int ITEMLIFE = AttributesEnum.ItemLife.index();
    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int ENTEREDBY = AttributesEnum.EnteredBy.index();
    public static final int ENTEREDON = AttributesEnum.EnteredOn.index();
    public static final int LASTEDITEDBY = AttributesEnum.LastEditedBy.index();
    public static final int LASTEDITEDON = AttributesEnum.LastEditedOn.index();
    public static final int FABDETAILEO = AttributesEnum.FabDetailEO.index();
    public static final int ITEMTYPEEO = AttributesEnum.ItemTypeEO.index();
    public static final int UOMEO = AttributesEnum.UomEO.index();
    public static final int ITEMCATEGORYEO = AttributesEnum.ItemCategoryEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ItemMasterEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("STP.model.eo.ItemMasterEO");
    }


    /**
     * Gets the attribute value for ItemId, using the alias name ItemId.
     * @return the value of ItemId
     */
    public Number getItemId() {
        return (Number) getAttributeInternal(ITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemId.
     * @param value value to set the ItemId
     */
    public void setItemId(Number value) {
        setAttributeInternal(ITEMID, value);
    }

    /**
     * Gets the attribute value for ItemTypeId, using the alias name ItemTypeId.
     * @return the value of ItemTypeId
     */
    public Number getItemTypeId() {
        return (Number) getAttributeInternal(ITEMTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemTypeId.
     * @param value value to set the ItemTypeId
     */
    public void setItemTypeId(Number value) {
        setAttributeInternal(ITEMTYPEID, value);
    }

    /**
     * Gets the attribute value for ItemNo, using the alias name ItemNo.
     * @return the value of ItemNo
     */
    public String getItemNo() {
        return (String) getAttributeInternal(ITEMNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemNo.
     * @param value value to set the ItemNo
     */
    public void setItemNo(String value) {
        setAttributeInternal(ITEMNO, value);
    }

    /**
     * Gets the attribute value for ItemCatId, using the alias name ItemCatId.
     * @return the value of ItemCatId
     */
    public Number getItemCatId() {
        return (Number) getAttributeInternal(ITEMCATID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemCatId.
     * @param value value to set the ItemCatId
     */
    public void setItemCatId(Number value) {
        setAttributeInternal(ITEMCATID, value);
    }

    /**
     * Gets the attribute value for ItemDescription, using the alias name ItemDescription.
     * @return the value of ItemDescription
     */
    public String getItemDescription() {
        return (String) getAttributeInternal(ITEMDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemDescription.
     * @param value value to set the ItemDescription
     */
    public void setItemDescription(String value) {
        setAttributeInternal(ITEMDESCRIPTION, value);
    }

    /**
     * Gets the attribute value for UomId, using the alias name UomId.
     * @return the value of UomId
     */
    public Number getUomId() {
        return (Number) getAttributeInternal(UOMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UomId.
     * @param value value to set the UomId
     */
    public void setUomId(Number value) {
        setAttributeInternal(UOMID, value);
    }

    /**
     * Gets the attribute value for ParentId, using the alias name ParentId.
     * @return the value of ParentId
     */
    public Number getParentId() {
        return (Number) getAttributeInternal(PARENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParentId.
     * @param value value to set the ParentId
     */
    public void setParentId(Number value) {
        setAttributeInternal(PARENTID, value);
    }

    /**
     * Gets the attribute value for MachineId, using the alias name MachineId.
     * @return the value of MachineId
     */
    public Number getMachineId() {
        return (Number) getAttributeInternal(MACHINEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MachineId.
     * @param value value to set the MachineId
     */
    public void setMachineId(Number value) {
        setAttributeInternal(MACHINEID, value);
    }

    /**
     * Gets the attribute value for OldItemId, using the alias name OldItemId.
     * @return the value of OldItemId
     */
    public String getOldItemId() {
        return (String) getAttributeInternal(OLDITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OldItemId.
     * @param value value to set the OldItemId
     */
    public void setOldItemId(String value) {
        setAttributeInternal(OLDITEMID, value);
    }

    /**
     * Gets the attribute value for Brand, using the alias name Brand.
     * @return the value of Brand
     */
    public String getBrand() {
        return (String) getAttributeInternal(BRAND);
    }

    /**
     * Sets <code>value</code> as the attribute value for Brand.
     * @param value value to set the Brand
     */
    public void setBrand(String value) {
        setAttributeInternal(BRAND, value);
    }

    /**
     * Gets the attribute value for InventoryType, using the alias name InventoryType.
     * @return the value of InventoryType
     */
    public String getInventoryType() {
        return (String) getAttributeInternal(INVENTORYTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for InventoryType.
     * @param value value to set the InventoryType
     */
    public void setInventoryType(String value) {
        setAttributeInternal(INVENTORYTYPE, value);
    }

    /**
     * Gets the attribute value for MinStock, using the alias name MinStock.
     * @return the value of MinStock
     */
    public Number getMinStock() {
        return (Number) getAttributeInternal(MINSTOCK);
    }

    /**
     * Sets <code>value</code> as the attribute value for MinStock.
     * @param value value to set the MinStock
     */
    public void setMinStock(Number value) {
        setAttributeInternal(MINSTOCK, value);
    }

    /**
     * Gets the attribute value for MaxStock, using the alias name MaxStock.
     * @return the value of MaxStock
     */
    public Number getMaxStock() {
        return (Number) getAttributeInternal(MAXSTOCK);
    }

    /**
     * Sets <code>value</code> as the attribute value for MaxStock.
     * @param value value to set the MaxStock
     */
    public void setMaxStock(Number value) {
        setAttributeInternal(MAXSTOCK, value);
    }

    /**
     * Gets the attribute value for RackNo, using the alias name RackNo.
     * @return the value of RackNo
     */
    public String getRackNo() {
        return (String) getAttributeInternal(RACKNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for RackNo.
     * @param value value to set the RackNo
     */
    public void setRackNo(String value) {
        setAttributeInternal(RACKNO, value);
    }

    /**
     * Gets the attribute value for CabnitNo, using the alias name CabnitNo.
     * @return the value of CabnitNo
     */
    public String getCabnitNo() {
        return (String) getAttributeInternal(CABNITNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for CabnitNo.
     * @param value value to set the CabnitNo
     */
    public void setCabnitNo(String value) {
        setAttributeInternal(CABNITNO, value);
    }

    /**
     * Gets the attribute value for ItemLife, using the alias name ItemLife.
     * @return the value of ItemLife
     */
    public Number getItemLife() {
        return (Number) getAttributeInternal(ITEMLIFE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemLife.
     * @param value value to set the ItemLife
     */
    public void setItemLife(Number value) {
        setAttributeInternal(ITEMLIFE, value);
    }

    /**
     * Gets the attribute value for Active, using the alias name Active.
     * @return the value of Active
     */
    public String getActive() {
        return (String) getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Active.
     * @param value value to set the Active
     */
    public void setActive(String value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * Gets the attribute value for EnteredBy, using the alias name EnteredBy.
     * @return the value of EnteredBy
     */
    public Number getEnteredBy() {
        return (Number) getAttributeInternal(ENTEREDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnteredBy.
     * @param value value to set the EnteredBy
     */
    public void setEnteredBy(Number value) {
        setAttributeInternal(ENTEREDBY, value);
    }

    /**
     * Gets the attribute value for EnteredOn, using the alias name EnteredOn.
     * @return the value of EnteredOn
     */
    public Date getEnteredOn() {
        return (Date) getAttributeInternal(ENTEREDON);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnteredOn.
     * @param value value to set the EnteredOn
     */
    public void setEnteredOn(Date value) {
        setAttributeInternal(ENTEREDON, value);
    }

    /**
     * Gets the attribute value for LastEditedBy, using the alias name LastEditedBy.
     * @return the value of LastEditedBy
     */
    public Number getLastEditedBy() {
        return (Number) getAttributeInternal(LASTEDITEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastEditedBy.
     * @param value value to set the LastEditedBy
     */
    public void setLastEditedBy(Number value) {
        setAttributeInternal(LASTEDITEDBY, value);
    }

    /**
     * Gets the attribute value for LastEditedOn, using the alias name LastEditedOn.
     * @return the value of LastEditedOn
     */
    public Date getLastEditedOn() {
        return (Date) getAttributeInternal(LASTEDITEDON);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastEditedOn.
     * @param value value to set the LastEditedOn
     */
    public void setLastEditedOn(Date value) {
        setAttributeInternal(LASTEDITEDON, value);
    }

    /**
     * Gets the attribute value for ColorId, using the alias name ColorId.
     * @return the value of ColorId
     */
    public Number getColorId() {
        return (Number) getAttributeInternal(COLORID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ColorId.
     * @param value value to set the ColorId
     */
    public void setColorId(Number value) {
        setAttributeInternal(COLORID, value);
    }

    /**
     * Gets the attribute value for SizeId, using the alias name SizeId.
     * @return the value of SizeId
     */
    public Number getSizeId() {
        return (Number) getAttributeInternal(SIZEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SizeId.
     * @param value value to set the SizeId
     */
    public void setSizeId(Number value) {
        setAttributeInternal(SIZEID, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getFabDetailEO() {
        return (RowIterator) getAttributeInternal(FABDETAILEO);
    }

    /**
     * @return the associated entity ItemTypeEOImpl.
     */
    public ItemTypeEOImpl getItemTypeEO() {
        return (ItemTypeEOImpl) getAttributeInternal(ITEMTYPEEO);
    }

    /**
     * Sets <code>value</code> as the associated entity ItemTypeEOImpl.
     */
    public void setItemTypeEO(ItemTypeEOImpl value) {
        setAttributeInternal(ITEMTYPEEO, value);
    }

    /**
     * @return the associated entity UomEOImpl.
     */
    public UomEOImpl getUomEO() {
        return (UomEOImpl) getAttributeInternal(UOMEO);
    }

    /**
     * Sets <code>value</code> as the associated entity UomEOImpl.
     */
    public void setUomEO(UomEOImpl value) {
        setAttributeInternal(UOMEO, value);
    }

    /**
     * @return the associated entity ItemCategoryEOImpl.
     */
    public ItemCategoryEOImpl getItemCategoryEO() {
        return (ItemCategoryEOImpl) getAttributeInternal(ITEMCATEGORYEO);
    }

    /**
     * Sets <code>value</code> as the associated entity ItemCategoryEOImpl.
     */
    public void setItemCategoryEO(ItemCategoryEOImpl value) {
        setAttributeInternal(ITEMCATEGORYEO, value);
    }


    /**
     * @param itemId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number itemId) {
        return new Key(new Object[] { itemId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("ITEM_MASTER_S", getDBTransaction());
        setItemId(seq.getSequenceNumber());

    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation==DML_INSERT) {
            ApplicationModule am=getDBTransaction().getRootApplicationModule();
            ViewObject vo=am.findViewObject("pkItemMast");
            if (vo!=null) {
                vo.remove();
           }
            vo=am.createViewObjectFromQueryStmt("pkItemMast", "select '"+getItemTypeEO().getItemTypePrefix()+"'||'-'||lpad((nvl(max(to_number(substr(item_no,instr(m.item_no,'-',1)+1)) ),0)+1),'5',0) from item_master m where m.ITEM_TYPE_ID="+getItemTypeId());
            vo.executeQuery();
            System.out.println(vo.first().getAttribute(0).toString() + "no");
            setItemNo(vo.first().getAttribute(0).toString());
            vo.remove();
       }
        super.doDML(operation, e);
    }
}

