package STP.model.eo;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 22 12:58:36 PKT 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BpMasterEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        BpId,
        BpfId,
        BpNo,
        Name,
        OldId,
        AcId,
        ContactNo,
        RefNo,
        Brand,
        EmailNo,
        Ntn,
        Address1,
        Address2,
        Active,
        EnteredBy,
        EnteredOn,
        LastEditedBy,
        LastEditedOn,
        BpFrefixEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int BPID = AttributesEnum.BpId.index();
    public static final int BPFID = AttributesEnum.BpfId.index();
    public static final int BPNO = AttributesEnum.BpNo.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int OLDID = AttributesEnum.OldId.index();
    public static final int ACID = AttributesEnum.AcId.index();
    public static final int CONTACTNO = AttributesEnum.ContactNo.index();
    public static final int REFNO = AttributesEnum.RefNo.index();
    public static final int BRAND = AttributesEnum.Brand.index();
    public static final int EMAILNO = AttributesEnum.EmailNo.index();
    public static final int NTN = AttributesEnum.Ntn.index();
    public static final int ADDRESS1 = AttributesEnum.Address1.index();
    public static final int ADDRESS2 = AttributesEnum.Address2.index();
    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int ENTEREDBY = AttributesEnum.EnteredBy.index();
    public static final int ENTEREDON = AttributesEnum.EnteredOn.index();
    public static final int LASTEDITEDBY = AttributesEnum.LastEditedBy.index();
    public static final int LASTEDITEDON = AttributesEnum.LastEditedOn.index();
    public static final int BPFREFIXEO = AttributesEnum.BpFrefixEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public BpMasterEOImpl() {
    }

    /**
     * Gets the attribute value for BpId, using the alias name BpId.
     * @return the value of BpId
     */
    public Number getBpId() {
        return (Number) getAttributeInternal(BPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BpId.
     * @param value value to set the BpId
     */
    public void setBpId(Number value) {
        setAttributeInternal(BPID, value);
    }

    /**
     * Gets the attribute value for BpfId, using the alias name BpfId.
     * @return the value of BpfId
     */
    public Number getBpfId() {
        return (Number) getAttributeInternal(BPFID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BpfId.
     * @param value value to set the BpfId
     */
    public void setBpfId(Number value) {
        setAttributeInternal(BPFID, value);
    }

    /**
     * Gets the attribute value for BpNo, using the alias name BpNo.
     * @return the value of BpNo
     */
    public String getBpNo() {
        return (String) getAttributeInternal(BPNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for BpNo.
     * @param value value to set the BpNo
     */
    public void setBpNo(String value) {
        setAttributeInternal(BPNO, value);
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the value of Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for OldId, using the alias name OldId.
     * @return the value of OldId
     */
    public String getOldId() {
        return (String) getAttributeInternal(OLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OldId.
     * @param value value to set the OldId
     */
    public void setOldId(String value) {
        setAttributeInternal(OLDID, value);
    }

    /**
     * Gets the attribute value for AcId, using the alias name AcId.
     * @return the value of AcId
     */
    public String getAcId() {
        return (String) getAttributeInternal(ACID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AcId.
     * @param value value to set the AcId
     */
    public void setAcId(String value) {
        setAttributeInternal(ACID, value);
    }

    /**
     * Gets the attribute value for ContactNo, using the alias name ContactNo.
     * @return the value of ContactNo
     */
    public String getContactNo() {
        return (String) getAttributeInternal(CONTACTNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContactNo.
     * @param value value to set the ContactNo
     */
    public void setContactNo(String value) {
        setAttributeInternal(CONTACTNO, value);
    }

    /**
     * Gets the attribute value for RefNo, using the alias name RefNo.
     * @return the value of RefNo
     */
    public String getRefNo() {
        return (String) getAttributeInternal(REFNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for RefNo.
     * @param value value to set the RefNo
     */
    public void setRefNo(String value) {
        setAttributeInternal(REFNO, value);
    }

    /**
     * Gets the attribute value for Brand, using the alias name Brand.
     * @return the value of Brand
     */
    public String getBrand() {
        return (String) getAttributeInternal(BRAND);
    }

    /**
     * Sets <code>value</code> as the attribute value for Brand.
     * @param value value to set the Brand
     */
    public void setBrand(String value) {
        setAttributeInternal(BRAND, value);
    }

    /**
     * Gets the attribute value for EmailNo, using the alias name EmailNo.
     * @return the value of EmailNo
     */
    public String getEmailNo() {
        return (String) getAttributeInternal(EMAILNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmailNo.
     * @param value value to set the EmailNo
     */
    public void setEmailNo(String value) {
        setAttributeInternal(EMAILNO, value);
    }

    /**
     * Gets the attribute value for Ntn, using the alias name Ntn.
     * @return the value of Ntn
     */
    public String getNtn() {
        return (String) getAttributeInternal(NTN);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ntn.
     * @param value value to set the Ntn
     */
    public void setNtn(String value) {
        setAttributeInternal(NTN, value);
    }

    /**
     * Gets the attribute value for Address1, using the alias name Address1.
     * @return the value of Address1
     */
    public String getAddress1() {
        return (String) getAttributeInternal(ADDRESS1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Address1.
     * @param value value to set the Address1
     */
    public void setAddress1(String value) {
        setAttributeInternal(ADDRESS1, value);
    }

    /**
     * Gets the attribute value for Address2, using the alias name Address2.
     * @return the value of Address2
     */
    public String getAddress2() {
        return (String) getAttributeInternal(ADDRESS2);
    }

    /**
     * Sets <code>value</code> as the attribute value for Address2.
     * @param value value to set the Address2
     */
    public void setAddress2(String value) {
        setAttributeInternal(ADDRESS2, value);
    }

    /**
     * Gets the attribute value for Active, using the alias name Active.
     * @return the value of Active
     */
    public String getActive() {
        return (String) getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Active.
     * @param value value to set the Active
     */
    public void setActive(String value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * Gets the attribute value for EnteredBy, using the alias name EnteredBy.
     * @return the value of EnteredBy
     */
    public Number getEnteredBy() {
        return (Number) getAttributeInternal(ENTEREDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnteredBy.
     * @param value value to set the EnteredBy
     */
    public void setEnteredBy(Number value) {
        setAttributeInternal(ENTEREDBY, value);
    }

    /**
     * Gets the attribute value for EnteredOn, using the alias name EnteredOn.
     * @return the value of EnteredOn
     */
    public Date getEnteredOn() {
        return (Date) getAttributeInternal(ENTEREDON);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnteredOn.
     * @param value value to set the EnteredOn
     */
    public void setEnteredOn(Date value) {
        setAttributeInternal(ENTEREDON, value);
    }

    /**
     * Gets the attribute value for LastEditedBy, using the alias name LastEditedBy.
     * @return the value of LastEditedBy
     */
    public Number getLastEditedBy() {
        return (Number) getAttributeInternal(LASTEDITEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastEditedBy.
     * @param value value to set the LastEditedBy
     */
    public void setLastEditedBy(Number value) {
        setAttributeInternal(LASTEDITEDBY, value);
    }

    /**
     * Gets the attribute value for LastEditedOn, using the alias name LastEditedOn.
     * @return the value of LastEditedOn
     */
    public Date getLastEditedOn() {
        return (Date) getAttributeInternal(LASTEDITEDON);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastEditedOn.
     * @param value value to set the LastEditedOn
     */
    public void setLastEditedOn(Date value) {
        setAttributeInternal(LASTEDITEDON, value);
    }

    /**
     * @return the associated entity BpFrefixEOImpl.
     */
    public BpFrefixEOImpl getBpFrefixEO() {
        return (BpFrefixEOImpl) getAttributeInternal(BPFREFIXEO);
    }

    /**
     * Sets <code>value</code> as the associated entity BpFrefixEOImpl.
     */
    public void setBpFrefixEO(BpFrefixEOImpl value) {
        setAttributeInternal(BPFREFIXEO, value);
    }

    /**
     * @param bpId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number bpId) {
        return new Key(new Object[] { bpId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("STP.model.eo.BpMasterEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("BP_MASTER_S", getDBTransaction());
          setBpId(seq.getSequenceNumber());
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        
        if (operation==DML_INSERT) {
            ApplicationModule am=getDBTransaction().getRootApplicationModule();
            ViewObject vo=am.findViewObject("pkBpMaster");
            if (vo!=null) {
                vo.remove();
           }
            vo=am.createViewObjectFromQueryStmt("pkBpMaster", "select '"+getBpFrefixEO().getBpfPrefix()+"'||'-'||lpad((nvl(max(to_number(substr(bp_no,instr(m.bp_no,'-',1)+1)) ),0)+1),'5',0) from bp_master m where m.BPF_ID="+getBpfId());
            vo.executeQuery();
            System.out.println(vo.first().getAttribute(0).toString() + "no");
            setBpNo(vo.first().getAttribute(0).toString());
            vo.remove();
        }
        super.doDML(operation, e);
    }
}

