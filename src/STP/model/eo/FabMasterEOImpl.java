package STP.model.eo;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 15 16:15:16 PKT 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FabMasterEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        FabId,
        FabNo,
        FabTypeId,
        FabName,
        KnitWaste,
        DyeWaste,
        PrintWaste,
        CuttingWaste,
        ProdWaste,
        OtherWaste,
        Active,
        EnteredBy,
        EnteredOn,
        LastEditedBy,
        LastEditedOn,
        FabDetailEO,
        FabTypeEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int FABID = AttributesEnum.FabId.index();
    public static final int FABNO = AttributesEnum.FabNo.index();
    public static final int FABTYPEID = AttributesEnum.FabTypeId.index();
    public static final int FABNAME = AttributesEnum.FabName.index();
    public static final int KNITWASTE = AttributesEnum.KnitWaste.index();
    public static final int DYEWASTE = AttributesEnum.DyeWaste.index();
    public static final int PRINTWASTE = AttributesEnum.PrintWaste.index();
    public static final int CUTTINGWASTE = AttributesEnum.CuttingWaste.index();
    public static final int PRODWASTE = AttributesEnum.ProdWaste.index();
    public static final int OTHERWASTE = AttributesEnum.OtherWaste.index();
    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int ENTEREDBY = AttributesEnum.EnteredBy.index();
    public static final int ENTEREDON = AttributesEnum.EnteredOn.index();
    public static final int LASTEDITEDBY = AttributesEnum.LastEditedBy.index();
    public static final int LASTEDITEDON = AttributesEnum.LastEditedOn.index();
    public static final int FABDETAILEO = AttributesEnum.FabDetailEO.index();
    public static final int FABTYPEEO = AttributesEnum.FabTypeEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public FabMasterEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("STP.model.eo.FabMasterEO");
    }


    /**
     * Gets the attribute value for FabId, using the alias name FabId.
     * @return the value of FabId
     */
    public Number getFabId() {
        return (Number) getAttributeInternal(FABID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FabId.
     * @param value value to set the FabId
     */
    public void setFabId(Number value) {
        setAttributeInternal(FABID, value);
    }

    /**
     * Gets the attribute value for FabNo, using the alias name FabNo.
     * @return the value of FabNo
     */
    public String getFabNo() {
        return (String) getAttributeInternal(FABNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for FabNo.
     * @param value value to set the FabNo
     */
    public void setFabNo(String value) {
        setAttributeInternal(FABNO, value);
    }

    /**
     * Gets the attribute value for FabTypeId, using the alias name FabTypeId.
     * @return the value of FabTypeId
     */
    public Number getFabTypeId() {
        return (Number) getAttributeInternal(FABTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FabTypeId.
     * @param value value to set the FabTypeId
     */
    public void setFabTypeId(Number value) {
        setAttributeInternal(FABTYPEID, value);
    }

    /**
     * Gets the attribute value for FabName, using the alias name FabName.
     * @return the value of FabName
     */
    public String getFabName() {
        return (String) getAttributeInternal(FABNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for FabName.
     * @param value value to set the FabName
     */
    public void setFabName(String value) {
        setAttributeInternal(FABNAME, value);
    }

    /**
     * Gets the attribute value for KnitWaste, using the alias name KnitWaste.
     * @return the value of KnitWaste
     */
    public Number getKnitWaste() {
        return (Number) getAttributeInternal(KNITWASTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for KnitWaste.
     * @param value value to set the KnitWaste
     */
    public void setKnitWaste(Number value) {
        setAttributeInternal(KNITWASTE, value);
    }

    /**
     * Gets the attribute value for DyeWaste, using the alias name DyeWaste.
     * @return the value of DyeWaste
     */
    public Number getDyeWaste() {
        return (Number) getAttributeInternal(DYEWASTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DyeWaste.
     * @param value value to set the DyeWaste
     */
    public void setDyeWaste(Number value) {
        setAttributeInternal(DYEWASTE, value);
    }

    /**
     * Gets the attribute value for PrintWaste, using the alias name PrintWaste.
     * @return the value of PrintWaste
     */
    public Number getPrintWaste() {
        return (Number) getAttributeInternal(PRINTWASTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrintWaste.
     * @param value value to set the PrintWaste
     */
    public void setPrintWaste(Number value) {
        setAttributeInternal(PRINTWASTE, value);
    }

    /**
     * Gets the attribute value for CuttingWaste, using the alias name CuttingWaste.
     * @return the value of CuttingWaste
     */
    public Number getCuttingWaste() {
        return (Number) getAttributeInternal(CUTTINGWASTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CuttingWaste.
     * @param value value to set the CuttingWaste
     */
    public void setCuttingWaste(Number value) {
        setAttributeInternal(CUTTINGWASTE, value);
    }

    /**
     * Gets the attribute value for ProdWaste, using the alias name ProdWaste.
     * @return the value of ProdWaste
     */
    public Number getProdWaste() {
        return (Number) getAttributeInternal(PRODWASTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProdWaste.
     * @param value value to set the ProdWaste
     */
    public void setProdWaste(Number value) {
        setAttributeInternal(PRODWASTE, value);
    }

    /**
     * Gets the attribute value for OtherWaste, using the alias name OtherWaste.
     * @return the value of OtherWaste
     */
    public Number getOtherWaste() {
        return (Number) getAttributeInternal(OTHERWASTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for OtherWaste.
     * @param value value to set the OtherWaste
     */
    public void setOtherWaste(Number value) {
        setAttributeInternal(OTHERWASTE, value);
    }

    /**
     * Gets the attribute value for Active, using the alias name Active.
     * @return the value of Active
     */
    public String getActive() {
        return (String) getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Active.
     * @param value value to set the Active
     */
    public void setActive(String value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * Gets the attribute value for EnteredBy, using the alias name EnteredBy.
     * @return the value of EnteredBy
     */
    public Number getEnteredBy() {
        return (Number) getAttributeInternal(ENTEREDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnteredBy.
     * @param value value to set the EnteredBy
     */
    public void setEnteredBy(Number value) {
        setAttributeInternal(ENTEREDBY, value);
    }

    /**
     * Gets the attribute value for EnteredOn, using the alias name EnteredOn.
     * @return the value of EnteredOn
     */
    public Date getEnteredOn() {
        return (Date) getAttributeInternal(ENTEREDON);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnteredOn.
     * @param value value to set the EnteredOn
     */
    public void setEnteredOn(Date value) {
        setAttributeInternal(ENTEREDON, value);
    }

    /**
     * Gets the attribute value for LastEditedBy, using the alias name LastEditedBy.
     * @return the value of LastEditedBy
     */
    public Number getLastEditedBy() {
        return (Number) getAttributeInternal(LASTEDITEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastEditedBy.
     * @param value value to set the LastEditedBy
     */
    public void setLastEditedBy(Number value) {
        setAttributeInternal(LASTEDITEDBY, value);
    }

    /**
     * Gets the attribute value for LastEditedOn, using the alias name LastEditedOn.
     * @return the value of LastEditedOn
     */
    public Date getLastEditedOn() {
        return (Date) getAttributeInternal(LASTEDITEDON);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastEditedOn.
     * @param value value to set the LastEditedOn
     */
    public void setLastEditedOn(Date value) {
        setAttributeInternal(LASTEDITEDON, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getFabDetailEO() {
        return (RowIterator) getAttributeInternal(FABDETAILEO);
    }

    /**
     * @return the associated entity FabTypeEOImpl.
     */
    public FabTypeEOImpl getFabTypeEO() {
        return (FabTypeEOImpl) getAttributeInternal(FABTYPEEO);
    }

    /**
     * Sets <code>value</code> as the associated entity FabTypeEOImpl.
     */
    public void setFabTypeEO(FabTypeEOImpl value) {
        setAttributeInternal(FABTYPEEO, value);
    }


    /**
     * @param fabId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number fabId) {
        return new Key(new Object[] { fabId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("FAB_MASTER_S", getDBTransaction());
        setFabId(seq.getSequenceNumber());

        
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation==DML_INSERT) {
            ApplicationModule am=getDBTransaction().getRootApplicationModule();
            ViewObject vo=am.findViewObject("pkFabMast");
            if (vo!=null) {
                vo.remove();
           }
                                                               
            vo=am.createViewObjectFromQueryStmt("pkFabMast", "select 'FB'||'-'||lpad((nvl(max(to_number(substr(fab_no,instr(m.fab_no,'-',1)+1)) ),0)+1),'4',0) from fab_master m");
            vo.executeQuery();
            System.out.println(vo.first().getAttribute(0).toString() + "no");
            setFabNo(vo.first().getAttribute(0).toString());
            vo.remove();
        }

       
        super.doDML(operation, e);
    }
}

