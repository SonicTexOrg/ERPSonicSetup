package STP.model.eo;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jun 10 18:44:25 PKT 2023
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ItemTypeEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ItemTypeId,
        ItemTypePrefix,
        ItemTypeDesc,
        Active,
        EnteredBy,
        EnteredOn,
        LastEditedBy,
        LastEditedOn,
        ItemMasterEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ITEMTYPEID = AttributesEnum.ItemTypeId.index();
    public static final int ITEMTYPEPREFIX = AttributesEnum.ItemTypePrefix.index();
    public static final int ITEMTYPEDESC = AttributesEnum.ItemTypeDesc.index();
    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int ENTEREDBY = AttributesEnum.EnteredBy.index();
    public static final int ENTEREDON = AttributesEnum.EnteredOn.index();
    public static final int LASTEDITEDBY = AttributesEnum.LastEditedBy.index();
    public static final int LASTEDITEDON = AttributesEnum.LastEditedOn.index();
    public static final int ITEMMASTEREO = AttributesEnum.ItemMasterEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ItemTypeEOImpl() {
    }

    /**
     * Gets the attribute value for ItemTypeId, using the alias name ItemTypeId.
     * @return the value of ItemTypeId
     */
    public Number getItemTypeId() {
        return (Number) getAttributeInternal(ITEMTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemTypeId.
     * @param value value to set the ItemTypeId
     */
    public void setItemTypeId(Number value) {
        setAttributeInternal(ITEMTYPEID, value);
    }

    /**
     * Gets the attribute value for ItemTypePrefix, using the alias name ItemTypePrefix.
     * @return the value of ItemTypePrefix
     */
    public String getItemTypePrefix() {
        return (String) getAttributeInternal(ITEMTYPEPREFIX);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemTypePrefix.
     * @param value value to set the ItemTypePrefix
     */
    public void setItemTypePrefix(String value) {
        setAttributeInternal(ITEMTYPEPREFIX, value);
    }

    /**
     * Gets the attribute value for ItemTypeDesc, using the alias name ItemTypeDesc.
     * @return the value of ItemTypeDesc
     */
    public String getItemTypeDesc() {
        return (String) getAttributeInternal(ITEMTYPEDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemTypeDesc.
     * @param value value to set the ItemTypeDesc
     */
    public void setItemTypeDesc(String value) {
        setAttributeInternal(ITEMTYPEDESC, value);
    }

    /**
     * Gets the attribute value for Active, using the alias name Active.
     * @return the value of Active
     */
    public String getActive() {
        return (String) getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Active.
     * @param value value to set the Active
     */
    public void setActive(String value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * Gets the attribute value for EnteredBy, using the alias name EnteredBy.
     * @return the value of EnteredBy
     */
    public Number getEnteredBy() {
        return (Number) getAttributeInternal(ENTEREDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnteredBy.
     * @param value value to set the EnteredBy
     */
    public void setEnteredBy(Number value) {
        setAttributeInternal(ENTEREDBY, value);
    }

    /**
     * Gets the attribute value for EnteredOn, using the alias name EnteredOn.
     * @return the value of EnteredOn
     */
    public Date getEnteredOn() {
        return (Date) getAttributeInternal(ENTEREDON);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnteredOn.
     * @param value value to set the EnteredOn
     */
    public void setEnteredOn(Date value) {
        setAttributeInternal(ENTEREDON, value);
    }

    /**
     * Gets the attribute value for LastEditedBy, using the alias name LastEditedBy.
     * @return the value of LastEditedBy
     */
    public Number getLastEditedBy() {
        return (Number) getAttributeInternal(LASTEDITEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastEditedBy.
     * @param value value to set the LastEditedBy
     */
    public void setLastEditedBy(Number value) {
        setAttributeInternal(LASTEDITEDBY, value);
    }

    /**
     * Gets the attribute value for LastEditedOn, using the alias name LastEditedOn.
     * @return the value of LastEditedOn
     */
    public Date getLastEditedOn() {
        return (Date) getAttributeInternal(LASTEDITEDON);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastEditedOn.
     * @param value value to set the LastEditedOn
     */
    public void setLastEditedOn(Date value) {
        setAttributeInternal(LASTEDITEDON, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getItemMasterEO() {
        return (RowIterator) getAttributeInternal(ITEMMASTEREO);
    }

    /**
     * @param itemTypeId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number itemTypeId) {
        return new Key(new Object[] { itemTypeId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("STP.model.eo.ItemTypeEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("ITEM_TYPE_S", getDBTransaction());
        setItemTypeId(seq.getSequenceNumber());

    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

